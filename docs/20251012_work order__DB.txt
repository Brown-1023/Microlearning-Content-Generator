Work Description
Build a secure, internal tool for our editors that converts curated notes into finalized microlearning content using a two-step LangGraph pipeline: Generator (toggle between Claude Sonnet 4.5 via Anthropic or Gemini 2.5 Pro via Google AI Studio) ? Formatter (always Gemini 2.5 Flash) ? Validator ? (Formatter retry once, same prompt & original DRAFT_1) ? final plain-text output. Editors will use a single-page UI with toggles/inputs, and the backend will expose one POST /run endpoint. Prompts and outputs are plain text (no JSON). Host on Cloud Run; start with a simple password gate, with a path to Google IAP/SSO later.

Milestone 1 — LangGraph Engine (Backend only)
Goal: Implement the production-ready pipeline and API with tests and containerization.
Scope
* Backend: Python FastAPI with one endpoint POST /run.
* Orchestration: LangGraph flow
load_prompts ? generator (Claude or Gemini Pro) ? formatter (Gemini Flash) ? validator ? (formatter retry ?1 using same prompt & original DRAFT_1) ? done/fail.
* Prompts (plain text):
o prompts/mcq.generator.template.txt (uses placeholders {{TEXT_TO_ANALYZE}}, {{NUM_QUESTIONS}}, {{FOCUS_AREAS}})
o prompts/mcq.formatter.txt
o prompts/nonmcq.generator.txt (uses placeholders {{TEXT_TO_ANALYZE}}, {{NUM_QUESTIONS}}, {{FOCUS_AREAS}})
o prompts/nonmcq.formatter.txt
* Validator (deterministic, code—not LLM):
o MCQ: Title ? vignette ? options A..D(/E) ? Correct Answer/Answer: ? Explanation ? Analysis of Other Options (per-letter) ? Key Insights.
o NMCQ: Clinical Vignette n: … ? vignette ? items 1. <Type>: (True/False, Yes/No, Drop Down) each with Answer: + Explanation:; Drop Down requires ?2 options before Answer:.
o Validators are aligned with our downstream parsers (accept A) or A., Answer: or Correct Answer:, header variants).
* Model integrations:
o Anthropic (Claude Sonnet 4.5) via official SDK.
o Google AI Studio (Gemini 2.5 Pro & 2.5 Flash) via @google/generative-ai/google-generativeai SDKs.
o Gemini 2.5 PRO calls temperature=0.51, top_p=0.95; Flash temperature=.51, top_p=.95; timeouts & basic retry on 429/5xx.
o Input size guard: e.g., 150k chars; return a friendly error if exceeded.
o Cap tokens to avoid misuse
* Config / Secrets:
o Env vars: GOOGLE_API_KEY, ANTHROPIC_API_KEY, APP_SECRET, optional EDITOR_PASSWORD, MAX_FORMATTER_RETRIES=1 (default 1), optional GEMINI_PRO, GEMINI_FLASH, CLAUDE_MODEL.
o Keys stored in Secret Manager; not exposed to browser.
* Deliverables:
o Source repo with app.py, pipeline.py, , tests, Dockerfile, requirements.txt/pyproject.toml.
o Tests: unit tests for validators, golden tests for MCQ/NMCQ, negative cases; simple CLI script for local runs.
o Observability: structured logging (model IDs, latency, attempts, validator errors), /healthz and /version (includes prompt file hashes & retry cap).
o Container builds and runs locally.
* Acceptance Criteria:
o POST /run returns validated plain-text output; on failure after one retry, returns 422 with error list + partial text.
o Validators pass our provided samples; downstream parsers load the generated files without errors.
o No secrets in client; env-configurable; container builds cleanly. Configurable temp, top_p

Milestone 2 — Single-Page UI + Integration
Goal: Provide a simple, secure editor-facing page and wire it to the backend.
Scope
* UI (single page, minimal styling):
o Toggle: MCQ / Non-MCQ
o Toggle: Generator = Claude Sonnet 4.5 | Gemini 2.5 Pro
o Inputs: Notes (textarea), # Questions (MCQ and NMCQ), Focus Area (optional)
UI knobs ? prompt injection: Ensure {{NUM_QUESTIONS}} and {{FOCUS_AREAS}} are injected into both MCQ and NMCQ generator template, and {{TEXT_TO_ANALYZE}} takes the Notes text.
o Run button; read-only output box (plain text); download as .txt.
* Auth
? Don’t send a static password in the Authorization header from the browser. Prefer either:
		IAP (Google SSO) asap (best) or
		Minimal login form + HttpOnly session cookie (server verifies; no secrets in JS).
Keep CORS locked and add basic rate-limits.
* Wiring: UI posts JSON to POST /run; show success text or validation errors (with partial).
* Hosting: Serve UI and API from the same Cloud Run service (one container).
* Deliverables:
o static/index.html (minimal Next.js/React if possible) + integration JS.
o Deployment manifest/notes for Cloud Run, CORS lock-down, request size limit.
o README updates for env, deploy, and IAP migration.
* Acceptance Criteria:
o Editors can submit inputs, select model/content type, and receive final validated plain-text results.
o Password gate active; keys remain server-side; logs show request/latency/attempts.
o Deployed Cloud Run URL provided and verified.

What we’ll provide
* Sample prompts and target formats (MCQ & NMCQ).
* Sample inputs for golden tests.
* Notes on downstream parser expectations (already reflected in validators).


Validator example (can share downstream flow that use python scripts to scape text file to create csv file if needed)
MCQ — Deterministic Rules (single-best-answer)
Required order
1. Title line — Question <n> - <title> (hyphen can be -, --, en/em dash)
o Regex: ^Question\s+\d+(?:\s*[-–—]{1,2}\s*.+)?$
2. Vignette/Stem — ?1 nonempty line(s) after the title and before options.
o (A line ending with ? is recommended but not required.)
3. Options block — 4–5 contiguous lines, each:
o A)/A. … D)/D. (and optional E)/E.)
o Regex per line: ^[A-E][\)\.]\s+.+$
4. Correct answer — exactly one line:
o Correct Answer: <A-E> or Answer: <A-E>
5. Explanation header — one of:
o Explanation of the Correct Answer: or Explanation:
o Followed by ?1 nonempty line.
6. Analysis of other options — header must be one of:
o Analysis of the Other Options (Distractors):
o Analysis of Other Options:
o Distractors:
o For each option letter present in (3), a paragraph starting with that letter
* e.g., A) … / A. …
7. Key Insights — header Key Insights: followed by nonempty text.
Other
* Plain text only; blank lines allowed between sections.
* No duplicate Correct Answer: or duplicate section headers.
 
NMCQ — Deterministic Rules (vignette + mixed question types)
Required order
1. Title line — Clinical Vignette <n>: <title>
o Regex: ^Clinical Vignette\s+\d+:\s+.+$
2. Vignette body — ?1 nonempty line(s).
3. Questions and Answers: (recommended; optional)
o If present: ^Questions and Answers:\s*$
Question items (one or more)
* Each starts with:
^<number>\.\s*(True/False|Yes/No|Drop Down Question[s]?|Drop-?Down(?: Question[s]?)?)\s*:\s*<text>
* Then must include:
o Answer: <value> (per type rules below)
o Explanation: <nonempty text>
* Type rules
o True/False ? Answer: must be True or False
o Yes/No ? Answer: must be Yes or No
o Drop Down ? ?2 options listed before Answer:
* Either line-by-line options (any nonempty lines not starting with a new item/Answer:/Explanation:)
* or an Options: a, b, c line (commas or | separators)
  
 



